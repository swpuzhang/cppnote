在UNIX文件操作中，文件位移量可以大于文件的当前长度，在这种情况下，对该文件的下一次写将延长该文件，并在文件中构成一个空洞，这一点是允许的。位于文件中但没有写过的字节都被设为 0。
如果 offset 比文件的当前长度更大，下一个写操作就会把文件“撑大（extend）”。这就是所谓的在文件里创造“空洞（hole）”。没有被实际写入文件的所有字节由重复的 0 表示。空洞是否占用硬盘空间是由文件系统（file system）决定的。
空洞文件作用很大，例如迅雷下载文件，在未下载完成时就已经占据了全部文件大小的空间，这时候就是空洞文件。下载时如果没有空洞文件，多线程下载时文件就都只能从一个地方写入，这就不是多线程了。如果有了空洞文件，可以从不同的地址写入，就完成了多线程的优势任务。 
接下来我们来看一个例子:


#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdio.h>
int main(void)
{
	int fd;
	off_t offset;
	fd = creat("tmp", 0777);   //创建一个权限为可读可写可执行的文件"tmp"
	if(-1 == fd)   //如果出错返回-1
	{
		perror("creat");
		return -1;
	}
	offset = lseek(fd, 1024ll * 1024ll * 1024ll, SEEK_END);  //设置偏移的大小为1024ll*1024ll*1024ll,并偏移到文件尾//部
	printf("offset = %d\n", offset);
	write(fd, "", 1);  //写空，写1个字节到文件描述符里
	close(fd);   //关闭文件描述符
	return 0;
}
